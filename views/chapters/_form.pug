h2.mb-2.text-lg.font-bold #{ chapter ? __("Edit the chapter") : __("Create a new chapter") }

- var route = chapter ? { "hx-put": `/chapters/${chapter.id}` } : { "hx-post": `/media/${medium.id}/chapters` };

form#chapter-form.flex.flex-col.gap-2(
  hx-swap="none",
  x-data=`{
    startTime: dayjs.duration(${chapter ? chapter.startTime : 0}, 'seconds'),
    endTime: dayjs.duration(${chapter ? chapter.endTime : medium.duration}, 'seconds'),
    sHours: 0, sMinutes: 0, sSeconds: 0,
    eHours: 0, eMinutes: 0, eSeconds: 1,
  }`,
  x-effect=`
    startTime = dayjs.duration({ hours: sHours, minutes: sMinutes, seconds: sSeconds });
    endTime = dayjs.duration({ hours: eHours, minutes: eMinutes, seconds: eSeconds });
  `,
  x-init=`
    eHours = endTime.hours();
    eMinutes = endTime.minutes();
    eSeconds = endTime.seconds();
  `
)&attributes(route)
  input(name="startTime", type="hidden", x-model="startTime.asSeconds()")
  input(name="endTime", type="hidden", x-model="endTime.asSeconds()")

  .flex.flex-wrap.items-center.gap-2
    label.min-w-20 #{ __("Title") }
    input.rounded.border.px-2.py-1(
      name="title",
      required,
      type="text",
      value=chapter ? chapter.title : ""
    )

  .flex.flex-wrap.items-center.gap-2
    .flex.items-center.gap-2(class="sm:flex-col")
      label.min-w-20 #{ __("Start Time") }
      small(x-text="dayjs.neatDuration(startTime.asSeconds())")

    .flex.flex-wrap.gap-1
      .flex.flex-col.items-end
        input.w-16.rounded.border.p-1.text-right(
          min="0",
          type="number",
          x-model="sHours"
        )
        small #{ __("Hour") }
      .flex.flex-col.items-end
        input.w-16.rounded.border.p-1.text-right(
          min="0",
          type="number",
          x-model="sMinutes"
        )
        small #{ __("Minute") }
      .flex.flex-col.items-end
        input.w-16.rounded.border.p-1.text-right(
          min="0",
          type="number",
          x-model="sSeconds"
        )
        small #{ __("Second") }
      .flex.flex-col
        - var ogStartTime = dayjs.duration(chapter ? chapter.startTime : 0, "seconds");
        button.rounded.border.px-2.py-1(
          @click=`
            sHours = ${ogStartTime.hours()};
            sMinutes = ${ogStartTime.minutes()};
            sSeconds = ${ogStartTime.seconds()};
          `,
          type="button"
        ) #{ __("Reset") }

  .flex.flex-wrap.items-center.gap-2
    .flex.items-center.gap-2(class="sm:flex-col")
      label.min-w-20 #{ __("End Time") }
      small(x-text="dayjs.neatDuration(endTime.asSeconds())")

    .flex.flex-wrap.gap-1
      .flex.flex-col.items-end
        input.w-16.rounded.border.p-1.text-right(
          min="0",
          type="number",
          x-model="eHours"
        )
        small #{ __("Hour") }
      .flex.flex-col.items-end
        input.w-16.rounded.border.p-1.text-right(
          min="0",
          type="number",
          x-model="eMinutes"
        )
        small #{ __("Minute") }
      .flex.flex-col.items-end
        input.w-16.rounded.border.p-1.text-right(
          min="0",
          type="number",
          x-model="eSeconds"
        )
        small #{ __("Second") }
      .flex.flex-col
        - var ogEndTime = dayjs.duration(chapter ? chapter.endTime : medium.duration, "seconds");
        button.rounded.border.px-2.py-1(
          @click=`
            eHours = ${ogEndTime.hours()};
            eMinutes = ${ogEndTime.minutes()};
            eSeconds = ${ogEndTime.seconds()};
          `,
          type="button"
        ) #{ __("Reset") }

  .flex.flex-wrap.items-center.justify-end.gap-2
    span.text-right.text-red-400(
      x-show="startTime.asSeconds() >= endTime.asSeconds()"
    ) #{ __("The end time should be greater than the start time.") }

    span.text-right.text-red-400(
      x-show=`
      startTime.asSeconds() >= ${medium.duration} ||
      endTime.asSeconds() > ${medium.duration}
    `
    ) #{ __(`The start time and the end time should fall within the duration (${dayjs.neatDuration(medium.duration)}) of the medium.`) }

    button.rounded.border.px-2.py-1(
      :disabled=`
        startTime.asSeconds() >= endTime.asSeconds() ||
        startTime.asSeconds() >= ${medium.duration} ||
        endTime.asSeconds() > ${medium.duration}
      `,
      class="disabled:cursor-not-allowed disabled:bg-gray-100"
    ) #{ __("Save") }
